{
  "Basic Code Generation Template": {
    "prefix": "prompt-basic-code-gen",
    "body": [
      "You are an expert [programming language] developer. Create a [function/class/module] that:",
      "- Purpose: [describe what it should do]",
      "- Inputs: [list parameters and types]",
      "- Outputs: [expected return values]",
      "- Constraints: [any limitations or requirements]",
      "- Include comprehensive error handling and documentation"
    ],
    "description": "Template for basic code generation"
  },
  "Feature Development Prompt": {
    "prefix": "prompt-feature-dev",
    "body": [
      "I want to build [FEATURE]. Break this into steps and outline a build plan:",
      "- Goal: [specific objective]",
      "- Tech stack: [preferred technologies]",
      "- User requirements: [what users need]",
      "- Success criteria: [how to measure completion]",
      "Label each step clearly and wait for my confirmation before proceeding."
    ],
    "description": "Prompt for feature development planning"
  },
  "Vibe Coding Starter": {
    "prefix": "prompt-vibe-starter",
    "body": [
      "Generate a minimal [language/framework] application that:",
      "- Core functionality: [main feature]",
      "- UI requirements: [basic interface needs]",
      "- Data handling: [how data flows]",
      "- Keep it simple and focused on the essential features"
    ],
    "description": "Starter prompt for Vibe Coding"
  },
  "Code Review Template": {
    "prefix": "prompt-code-review",
    "body": [
      "Act as a senior software engineer reviewing this code:",
      "[INSERT CODE]",
      "Analyze for:",
      "1. Code quality and best practices",
      "2. Performance implications",
      "3. Security vulnerabilities",
      "4. Potential bugs or edge cases",
      "5. Maintainability concerns",
      "6. Suggest specific improvements with examples"
    ],
    "description": "Template for code review"
  },
  "Bug Detection Prompt": {
    "prefix": "prompt-bug-detection",
    "body": [
      "Examine this [language] code for potential errors:",
      "[INSERT CODE]",
      "Expected behavior: [describe what should happen]",
      "Current issue: [what's going wrong]",
      "Identify the root cause and provide a fix with explanation."
    ],
    "description": "Prompt for bug detection"
  },
  "Code Explanation Template": {
    "prefix": "prompt-code-explain",
    "body": [
      "Explain this code line by line as if I'm a junior developer:",
      "[INSERT CODE]",
      "Assume I understand basic programming but need clarity on:",
      "- What each section does",
      "- Why certain approaches were chosen",
      "- Potential limitations or concerns",
      "- Best practices demonstrated"
    ],
    "description": "Template for code explanation"
  },
  "System Architecture Prompt": {
    "prefix": "prompt-system-arch",
    "body": [
      "Design a scalable architecture for [project description]:",
      "- User base: [expected scale]",
      "- Key features: [main functionality]",
      "- Performance requirements: [speed/load expectations]",
      "- Technology constraints: [preferred stack/limitations]",
      "Provide a high-level diagram concept and explain component interactions."
    ],
    "description": "Prompt for system architecture design"
  },
  "Database Design Template": {
    "prefix": "prompt-db-design",
    "body": [
      "Create a database schema for [application type]:",
      "- Entities: [main data objects]",
      "- Relationships: [how they connect]",
      "- Expected queries: [common operations]",
      "- Scalability considerations: [growth expectations]",
      "Include table structures, indexes, and relationships."
    ],
    "description": "Template for database design"
  },
  "Unit Test Generation": {
    "prefix": "prompt-unit-test",
    "body": [
      "Create comprehensive unit tests for this function:",
      "[INSERT FUNCTION]",
      "Test framework: [Jest/pytest/JUnit/etc.]",
      "Cover these scenarios:",
      "- Normal operation cases",
      "- Edge cases and boundary conditions",
      "- Error handling and invalid inputs",
      "- Performance with large datasets"
    ],
    "description": "Prompt for unit test generation"
  },
  "Test Case Planning": {
    "prefix": "prompt-test-planning",
    "body": [
      "Generate test scenarios for [feature/component]:",
      "- Happy path scenarios",
      "- Error conditions",
      "- Edge cases I might miss",
      "- Integration points",
      "- User acceptance criteria",
      "Format as a test plan with expected outcomes."
    ],
    "description": "Prompt for test case planning"
  },
  "Debug Helper Template": {
    "prefix": "prompt-debug-helper",
    "body": [
      "Help me debug this issue:",
      "Code: [INSERT PROBLEMATIC CODE]",
      "Error: [exact error message]",
      "Expected: [what should happen]",
      "Environment: [relevant details]",
      "What I've tried: [debugging steps taken]",
      "Guide me through systematic troubleshooting."
    ],
    "description": "Template for debug helper"
  },
  "Performance Optimization": {
    "prefix": "prompt-perf-optimize",
    "body": [
      "Optimize this code for better performance:",
      "[INSERT CODE]",
      "Current bottlenecks: [known issues]",
      "Performance goals: [specific targets]",
      "Constraints: [what can't change]",
      "Explain the improvements and trade-offs."
    ],
    "description": "Prompt for performance optimization"
  },
  "API Design Prompt": {
    "prefix": "prompt-api-design",
    "body": [
      "Design a RESTful API for [application domain]:",
      "- Resources: [main entities]",
      "- Operations: [CRUD and custom actions]",
      "- Authentication: [security requirements]",
      "- Response format: [JSON structure preferences]",
      "- Error handling: [how to manage failures]",
      "Include endpoint specifications and example requests/responses."
    ],
    "description": "Prompt for API design"
  },
  "API Documentation Generator": {
    "prefix": "prompt-api-docs",
    "body": [
      "Create comprehensive API documentation for:",
      "[INSERT API CODE/SPEC]",
      "Include:",
      "- Endpoint descriptions",
      "- Request/response examples",
      "- Authentication requirements",
      "- Error codes and handling",
      "- Usage examples for developers"
    ],
    "description": "Prompt for API documentation"
  },
  "Component Creation": {
    "prefix": "prompt-component-create",
    "body": [
      "Create a [React/Vue/Angular] component for [functionality]:",
      "- Props/inputs: [data it receives]",
      "- State management: [what it tracks]",
      "- User interactions: [events it handles]",
      "- Styling approach: [CSS/styled-components/etc.]",
      "- Accessibility requirements: [a11y considerations]",
      "Make it reusable and well-documented."
    ],
    "description": "Prompt for frontend component creation"
  },
  "UI/UX Implementation": {
    "prefix": "prompt-ui-implement",
    "body": [
      "Implement this UI design as code:",
      "- Framework: [React/Vue/Angular/vanilla]",
      "- Design requirements: [visual specifications]",
      "- Interactive elements: [buttons, forms, etc.]",
      "- Responsive behavior: [mobile/desktop]",
      "- Performance considerations: [loading, animations]",
      "Focus on clean, maintainable code."
    ],
    "description": "Prompt for UI/UX implementation"
  },
  "Server Setup Template": {
    "prefix": "prompt-server-setup",
    "body": [
      "Set up a [Node.js/Python/Java] server with:",
      "- Framework: [Express/Django/Spring]",
      "- Database: [PostgreSQL/MongoDB/MySQL]",
      "- Authentication: [JWT/OAuth/session-based]",
      "- Deployment: [Docker/cloud platform]",
      "- Monitoring: [logging and health checks]",
      "Include configuration and deployment scripts."
    ],
    "description": "Template for server setup"
  },
  "Data Pipeline Creator": {
    "prefix": "prompt-data-pipeline",
    "body": [
      "Build a data processing pipeline that:",
      "- Source: [where data comes from]",
      "- Transformations: [what processing is needed]",
      "- Destination: [where to store results]",
      "- Schedule: [when to run]",
      "- Error handling: [failure management]",
      "- Monitoring: [progress tracking]"
    ],
    "description": "Prompt for data pipeline creation"
  },
  "Project Specification Generator": {
    "prefix": "prompt-project-spec",
    "body": [
      "Create a comprehensive project specification for:",
      "Project: [name and description]",
      "Include:",
      "- Problem statement and goals",
      "- User stories and requirements",
      "- Technical architecture overview",
      "- Development milestones",
      "- Risk assessment",
      "- Success metrics",
      "Format as a professional project document."
    ],
    "description": "Prompt for project specification"
  },
  "Sprint Planning Template": {
    "prefix": "prompt-sprint-planning",
    "body": [
      "Plan a development sprint for:",
      "- Goal: [sprint objective]",
      "- Duration: [timeframe]",
      "- Team capacity: [available resources]",
      "- Backlog items: [features to implement]",
      "- Acceptance criteria: [definition of done]",
      "- Risk factors: [potential blockers]",
      "Create detailed task breakdown with estimates."
    ],
    "description": "Template for sprint planning"
  },
  "README Generator": {
    "prefix": "prompt-readme-gen",
    "body": [
      "Create a comprehensive README for this project:",
      "[PROJECT DETAILS]",
      "Include:",
      "- Clear project description",
      "- Installation instructions",
      "- Usage examples",
      "- API documentation (if applicable)",
      "- Contributing guidelines",
      "- License information",
      "Make it beginner-friendly and professional."
    ],
    "description": "Prompt for README generation"
  },
  "Technical Documentation": {
    "prefix": "prompt-tech-docs",
    "body": [
      "Document this technical system:",
      "[SYSTEM DESCRIPTION]",
      "Cover:",
      "- Architecture overview",
      "- Component descriptions",
      "- Data flows",
      "- Configuration options",
      "- Troubleshooting guide",
      "- Maintenance procedures",
      "Target audience: [developers/ops/users]"
    ],
    "description": "Prompt for technical documentation"
  },
  "Model Development Prompt": {
    "prefix": "prompt-ml-model",
    "body": [
      "Create a machine learning solution for:",
      "- Problem type: [classification/regression/clustering]",
      "- Dataset: [data characteristics]",
      "- Features: [input variables]",
      "- Target: [what to predict]",
      "- Evaluation metrics: [success measures]",
      "- Framework: [TensorFlow/PyTorch/scikit-learn]",
      "Include data preprocessing and model evaluation code."
    ],
    "description": "Prompt for ML model development"
  },
  "Data Analysis Template": {
    "prefix": "prompt-data-analysis",
    "body": [
      "Analyze this dataset for [business question]:",
      "[DATASET DESCRIPTION]",
      "Perform:",
      "- Exploratory data analysis",
      "- Statistical summaries",
      "- Visualizations",
      "- Insights and recommendations",
      "- Data quality assessment",
      "Use Python with pandas, matplotlib, and seaborn."
    ],
    "description": "Template for data analysis"
  },
  "CI/CD Pipeline": {
    "prefix": "prompt-cicd-pipeline",
    "body": [
      "Create a CI/CD pipeline for:",
      "- Application: [tech stack]",
      "- Testing: [unit/integration/e2e]",
      "- Build process: [compilation/bundling]",
      "- Deployment target: [cloud platform]",
      "- Monitoring: [health checks]",
      "- Rollback strategy: [failure handling]",
      "Use [GitHub Actions/Jenkins/GitLab CI]."
    ],
    "description": "Prompt for CI/CD pipeline"
  },
  "Docker Configuration": {
    "prefix": "prompt-docker-config",
    "body": [
      "Create Docker configuration for:",
      "- Application: [language/framework]",
      "- Dependencies: [external services]",
      "- Environment: [dev/staging/production]",
      "- Security: [user permissions, secrets]",
      "- Optimization: [image size, caching]",
      "Include Dockerfile and docker-compose.yml."
    ],
    "description": "Prompt for Docker configuration"
  },
  "Security Audit Template": {
    "prefix": "prompt-security-audit",
    "body": [
      "Perform a security audit of this code:",
      "[INSERT CODE]",
      "Check for:",
      "- Input validation issues",
      "- Authentication vulnerabilities",
      "- Authorization flaws",
      "- Data exposure risks",
      "- Injection attack vectors",
      "- Cryptographic weaknesses",
      "Provide specific remediation steps."
    ],
    "description": "Template for security audit"
  },
  "Secure Coding Prompt": {
    "prefix": "prompt-secure-coding",
    "body": [
      "Implement secure [functionality] with:",
      "- Input sanitization",
      "- Output encoding",
      "- Error handling without information leakage",
      "- Proper authentication/authorization",
      "- Secure data storage",
      "- Audit logging",
      "Language: [programming language]",
      "Framework: [if applicable]"
    ],
    "description": "Prompt for secure coding"
  },
  "Prompt Optimization": {
    "prefix": "prompt-optimize",
    "body": [
      "Improve this prompt for better AI responses:",
      "[ORIGINAL PROMPT]",
      "Make it:",
      "- More specific and actionable",
      "- Include better context",
      "- Add output format specifications",
      "- Include error handling instructions",
      "- Optimize for [specific AI tool]"
    ],
    "description": "Prompt for optimization"
  },
  "Custom Workflow Generator": {
    "prefix": "prompt-workflow-gen",
    "body": [
      "Create a development workflow for:",
      "- Team size: [number of developers]",
      "- Project type: [web app/mobile/API/etc.]",
      "- Timeline: [project duration]",
      "- Methodology: [agile/waterfall/hybrid]",
      "- Tools: [preferred development stack]",
      "Include templates, checklists, and best practices."
    ],
    "description": "Prompt for custom workflow"
  },
  "Context-Aware Development": {
    "prefix": "prompt-context-dev",
    "body": [
      "<context>",
      "Project: [project description]",
      "Codebase: [current state/architecture]",
      "Team: [skill levels and roles]",
      "Constraints: [time/budget/technical limitations]",
      "</context>",
      "",
      "Task: [specific development task]",
      "Requirements: [detailed specifications]",
      "Success criteria: [how to measure completion]",
      "",
      "Provide solution considering the full context above."
    ],
    "description": "Prompt for context-aware development"
  },
  "Iterative Refinement Template": {
    "prefix": "prompt-iterative-refine",
    "body": [
      "Refine this solution based on feedback:",
      "Original request: [initial requirement]",
      "Current solution: [what was implemented]",
      "Feedback: [specific issues or improvements needed]",
      "New constraints: [additional requirements]",
      "Maintain backward compatibility and explain changes."
    ],
    "description": "Template for iterative refinement"
  },
  "UI Components Template": {
    "prefix": "prompt-react-ui-component",
    "body": [
      "Context: React 18 with Tailwind CSS, functional components.",
      "Goal: Create a reusable [ComponentName] component that [describe functionality].",
      "Props: [prop1:type, prop2:type, children:ReactNode].",
      "Accessibility: use [specific ARIA attributes and roles].",
      "Examples:",
      "  Input: { [example props] }",
      "  Output: <[ComponentName]>…</[ComponentName]>",
      "Constraints:",
      "  - File: src/components/[ComponentName].tsx",
      "  - Export default",
      "  - 2-space indent"
    ],
    "description": "Template for creating reusable UI components"
  },
  "Pages and Routing Template": {
    "prefix": "prompt-react-routing",
    "body": [
      "Context: React Router v6, lazy loading, code splitting.",
      "Goal: Define a page at path \"[/route-path]\" with [routing logic description].",
      "Requirements:",
      "  - [Authentication/protection requirements]",
      "  - Use <Navigate> for redirects.",
      "Examples:",
      "  Input: [condition/state]",
      "  Output: [expected component/redirect]",
      "Constraints:",
      "  - File: src/pages/[PageName].tsx",
      "  - Add route in src/AppRoutes.tsx"
    ],
    "description": "Template for page components and routing logic"
  },
  "Forms and Validation Template": {
    "prefix": "prompt-react-form-validation",
    "body": [
      "Context: React Hook Form, Yup schema validation.",
      "Goal: Build a [FormName] with [list fields] and client-side validation.",
      "Requirements:",
      "  - [field1]: [validation rules].",
      "  - [field2]: [validation rules].",
      "Examples:",
      "  Input: { [invalid example data] }",
      "  Output: show errors under fields.",
      "Constraints:",
      "  - Use useForm from 'react-hook-form'.",
      "  - Schema defined via Yup."
    ],
    "description": "Template for form components with validation"
  },
  "State Management Template": {
    "prefix": "prompt-react-state-management",
    "body": [
      "Context: Zustand for global state, immutable updates.",
      "Goal: Create a store for [store purpose] state.",
      "State: { [stateProperty]: [type] }",
      "Actions: [action1, action2, action3].",
      "Examples:",
      "  Action: [actionName]({ [parameters] })",
      "  New state: { [updated state] }",
      "Constraints:",
      "  - File: src/store/[storeName].ts"
    ],
    "description": "Template for state management with Zustand"
  },
  "Theme Configuration Template": {
    "prefix": "prompt-react-theme-config",
    "body": [
      "Context: Styled-components with ThemeProvider.",
      "Goal: Define a [theme type] theme with [list theme properties].",
      "Theme shape: { [property]: [type] }",
      "Examples:",
      "  [Theme variant]: { [example values] }",
      "Constraints:",
      "  - File: src/theme/index.ts"
    ],
    "description": "Template for theme configuration"
  },
  "API Integration Template": {
    "prefix": "prompt-react-api-integration",
    "body": [
      "Context: Axios instance in src/api/client.ts, baseURL from env.",
      "Goal: Create [serviceName] with [operation type] methods: [method1, method2, method3].",
      "Examples:",
      "  [methodName](): returns [return type] via [HTTP method] '[endpoint]'.",
      "Constraints:",
      "  - Use async/await.",
      "  - Handle errors with try/catch."
    ],
    "description": "Template for API service integration"
  },
  "Test Cases Template": {
    "prefix": "prompt-react-test-cases",
    "body": [
      "Context: Jest + React Testing Library.",
      "Goal: Write tests for <[ComponentName]> component.",
      "Requirements:",
      "  - Mock [dependencies/functions] and [validation/behavior].",
      "Examples:",
      "  [Test scenario description and assertions].",
      "Constraints:",
      "  - File: src/components/__tests__/[ComponentName].test.tsx"
    ],
    "description": "Template for component testing"
  },
  "Custom Hooks Template": {
    "prefix": "prompt-react-custom-hooks",
    "body": [
      "Context: React 18 hooks, TypeScript.",
      "Goal: Create a custom hook [useSomething] that [functionality description].",
      "Parameters: [param1: type, param2?: type].",
      "Returns: { [property1]: type, [property2]: function }",
      "Examples:",
      "  Usage: const { [property], [method] } = [useSomething]([params])",
      "  Behavior: [describe what happens]",
      "Constraints:",
      "  - File: src/hooks/[useSomething].ts",
      "  - Handle cleanup in useEffect",
      "  - Include error handling"
    ],
    "description": "Template for custom React hooks"
  },
  "Performance Optimization Template": {
    "prefix": "prompt-react-performance",
    "body": [
      "Context: React performance optimization, memo, useMemo, useCallback.",
      "Goal: Optimize [ComponentName] component that [performance issue description].",
      "Current issues:",
      "  - [Issue 1: e.g., unnecessary re-renders]",
      "  - [Issue 2: e.g., expensive calculations]",
      "Solutions needed:",
      "  - [Solution approach]",
      "Examples:",
      "  Before: [current behavior]",
      "  After: [optimized behavior]",
      "Constraints:",
      "  - Maintain existing functionality",
      "  - Use React.memo, useMemo, useCallback appropriately"
    ],
    "description": "Template for React performance optimization"
  },
  "Context Provider Template": {
    "prefix": "prompt-react-context-provider",
    "body": [
      "Context: React Context API, TypeScript.",
      "Goal: Create a [SomethingContext] provider for [data/functionality description].",
      "Context value: { [property1]: type, [method1]: function }",
      "Provider props: { children: ReactNode, [optionalProp]?: type }",
      "Examples:",
      "  Provider: <[Something]Provider>[children]</[Something]Provider>",
      "  Consumer: const { [property], [method] } = use[Something]()",
      "Constraints:",
      "  - File: src/contexts/[Something]Context.tsx",
      "  - Include custom hook for consuming context",
      "  - Handle undefined context gracefully"
    ],
    "description": "Template for React Context providers"
  },
  "Error Boundary Template": {
    "prefix": "prompt-react-error-boundary",
    "body": [
      "Context: React Error Boundaries, error handling, logging.",
      "Goal: Create an error boundary that [specific error handling behavior].",
      "Features:",
      "  - Catch JavaScript errors in [scope description]",
      "  - Display [fallback UI description]",
      "  - Log errors to [logging service]",
      "Examples:",
      "  Error: [example error scenario]",
      "  Fallback: [what user sees]",
      "Constraints:",
      "  - File: src/components/ErrorBoundary.tsx",
      "  - Class component with componentDidCatch",
      "  - Include retry mechanism"
    ],
    "description": "Template for React Error Boundaries"
  },
  "Higher Order Component Template": {
    "prefix": "prompt-react-hoc",
    "body": [
      "Context: Higher Order Components, component composition.",
      "Goal: Create a HOC [withSomething] that [enhancement description].",
      "Enhancement: [what functionality it adds]",
      "Props injected: { [prop1]: type, [prop2]: function }",
      "Examples:",
      "  Usage: const Enhanced = [withSomething]([OriginalComponent])",
      "  Result: [describe enhanced behavior]",
      "Constraints:",
      "  - File: src/hocs/[withSomething].tsx",
      "  - Preserve original component props",
      "  - Handle ref forwarding"
    ],
    "description": "Template for Higher Order Components"
  },
  "Animation Components Template": {
    "prefix": "prompt-react-animation",
    "body": [
      "Context: Framer Motion / React Transition Group, smooth animations.",
      "Goal: Create animated [ComponentName] with [animation description].",
      "Animations:",
      "  - [Animation 1: e.g., fade in/out]",
      "  - [Animation 2: e.g., slide transitions]",
      "Triggers: [what triggers the animations]",
      "Examples:",
      "  State change: [trigger] → [animation result]",
      "Constraints:",
      "  - Smooth 60fps animations",
      "  - Respect prefers-reduced-motion",
      "  - Include animation cleanup"
    ],
    "description": "Template for animated React components"
  },
  "Data Fetching Template": {
    "prefix": "prompt-react-data-fetching",
    "body": [
      "Context: React Query / SWR, data fetching patterns.",
      "Goal: Implement data fetching for [data description] with [caching/sync requirements].",
      "Endpoints:",
      "  - [GET /endpoint]: [description]",
      "  - [POST /endpoint]: [description]",
      "Features:",
      "  - Loading states, error handling",
      "  - [Caching strategy]",
      "  - [Optimistic updates]",
      "Examples:",
      "  Query: [queryKey] → [data shape]",
      "  Mutation: [mutationFn] → [result]",
      "Constraints:",
      "  - File: src/hooks/[useDataHook].ts",
      "  - Handle offline scenarios"
    ],
    "description": "Template for data fetching with caching"
  },
  "Component Library Template": {
    "prefix": "prompt-react-component-library",
    "body": [
      "Context: Storybook, component library development.",
      "Goal: Create [ComponentName] for design system with [design requirements].",
      "Variants: [size/color/style variations]",
      "Props API: [comprehensive prop interface]",
      "Documentation:",
      "  - Storybook stories for each variant",
      "  - Usage examples and guidelines",
      "Examples:",
      "  Basic: <[ComponentName] [basicProps] />",
      "  Advanced: <[ComponentName] [advancedProps] />",
      "Constraints:",
      "  - Follow design system principles",
      "  - Include prop validation",
      "  - Export from index.ts"
    ],
    "description": "Template for design system components"
  },
  "Micro Frontend Template": {
    "prefix": "prompt-react-microfrontend",
    "body": [
      "Context: Module Federation, micro frontend architecture.",
      "Goal: Create [MicroAppName] that [specific functionality] and integrates with [host app].",
      "Exposed modules:",
      "  - [Module1]: [description]",
      "  - [Module2]: [description]",
      "Integration:",
      "  - Host app imports via [import syntax]",
      "  - Shared dependencies: [list]",
      "Examples:",
      "  Standalone: [micro app behavior]",
      "  Integrated: [behavior within host]",
      "Constraints:",
      "  - Webpack Module Federation config",
      "  - Independent deployment capability"
    ],
    "description": "Template for micro frontend components"
  },
  "WebRTC Integration Template": {
    "prefix": "prompt-react-webrtc",
    "body": [
      "Context: WebRTC API, real-time communication.",
      "Goal: Implement [communication feature] with [peer connection requirements].",
      "Features:",
      "  - [Video/Audio/Data] streaming",
      "  - Peer connection management",
      "  - [Signaling server integration]",
      "Events:",
      "  - onConnect, onDisconnect, onDataReceive",
      "Examples:",
      "  Connection: [how peers connect]",
      "  Data flow: [how data is exchanged]",
      "Constraints:",
      "  - Handle ICE candidates properly",
      "  - Include error recovery",
      "  - Support multiple browsers"
    ],
    "description": "Template for WebRTC integration"
  },
  "PWA Features Template": {
    "prefix": "prompt-react-pwa",
    "body": [
      "Context: Progressive Web App, service workers, offline capabilities.",
      "Goal: Add PWA features to [AppName] including [offline functionality].",
      "Features:",
      "  - Service worker for [caching strategy]",
      "  - Offline fallback pages",
      "  - Push notifications",
      "  - App installation prompt",
      "Manifest:",
      "  - App icons, theme colors",
      "  - Display modes and orientation",
      "Examples:",
      "  Offline: [what works without internet]",
      "  Notification: [when/what notifications sent]",
      "Constraints:",
      "  - Follow PWA best practices",
      "  - Handle cache invalidation"
    ],
    "description": "Template for PWA implementation"
  },
  "Accessibility Enhancement Template": {
    "prefix": "prompt-react-accessibility",
    "body": [
      "Context: WCAG 2.1 AA compliance, screen readers, keyboard navigation.",
      "Goal: Make [ComponentName] fully accessible with [specific a11y requirements].",
      "ARIA attributes:",
      "  - [aria-label, aria-describedby, role, etc.]",
      "Keyboard support:",
      "  - [Tab, Enter, Escape, Arrow keys behavior]",
      "Screen reader:",
      "  - [Announcements and descriptions]",
      "Examples:",
      "  Keyboard: [Tab] → [focus behavior]",
      "  Screen reader: announces \"[text]\"",
      "Constraints:",
      "  - Test with NVDA/JAWS/VoiceOver",
      "  - Color contrast ratio 4.5:1 minimum",
      "  - Focus indicators visible"
    ],
    "description": "Template for accessibility improvements"
  },
  "Internationalization Template": {
    "prefix": "prompt-react-i18n",
    "body": [
      "Context: react-i18next, multiple language support.",
      "Goal: Add internationalization to [ComponentName/Feature] supporting [languages list].",
      "Translation keys:",
      "  - [namespace].[key]: [description]",
      "Features:",
      "  - Language switching",
      "  - RTL support for [Arabic/Hebrew]",
      "  - Number/date formatting",
      "Examples:",
      "  Key: t('[namespace].[key]') → [translated text]",
      "  Interpolation: t('[key]', { [variable]: [value] })",
      "Constraints:",
      "  - File: src/locales/[lang]/[namespace].json",
      "  - Lazy load translation files",
      "  - Handle missing translations gracefully"
    ],
    "description": "Template for internationalization"
  },
  "Code Splitting Template": {
    "prefix": "prompt-react-code-splitting",
    "body": [
      "Context: React.lazy, Suspense, dynamic imports.",
      "Goal: Implement code splitting for [routes/components] to reduce [bundle size/load time].",
      "Split points:",
      "  - [Route/Component 1]: [why split here]",
      "  - [Route/Component 2]: [why split here]",
      "Loading strategy:",
      "  - Suspense fallback: [loading UI]",
      "  - Error boundary for chunk load failures",
      "Examples:",
      "  Import: const [Component] = lazy(() => import('[path]'))",
      "  Usage: <Suspense fallback={[loading]}><[Component] /></Suspense>",
      "Constraints:",
      "  - Preload critical chunks",
      "  - Handle network failures gracefully"
    ],
    "description": "Template for code splitting implementation"
  },
  "Full Stack Application Template": {
    "prefix": "prompt-vibe-fullstack-app",
    "body": [
      "Context: End-to-end application development with modern tech stack.",
      "Goal: Create a complete [AppName] application that [core functionality description].",
      "Architecture:",
      "  - Frontend: [React/Next.js/Vue] with [styling framework]",
      "  - Backend: [Node.js/Python/Go] with [database choice]",
      "  - Authentication: [auth strategy]",
      "  - Deployment: [platform choice]",
      "Core Features:",
      "  - [Feature 1]: [description]",
      "  - [Feature 2]: [description]",
      "  - [Feature 3]: [description]",
      "User Flows:",
      "  - [Primary flow]: [step-by-step process]",
      "  - [Secondary flow]: [step-by-step process]",
      "Success Criteria:",
      "  - [Measurable outcome 1]",
      "  - [Measurable outcome 2]",
      "Constraints:",
      "  - Timeline: [duration]",
      "  - Budget considerations: [if any]",
      "  - Performance targets: [specific metrics]"
    ],
    "description": "Template for complete full-stack application development"
  },
  "SaaS Product Template": {
    "prefix": "prompt-vibe-saas-product",
    "body": [
      "Context: Software as a Service product with subscription model.",
      "Goal: Build [ProductName] SaaS that solves [problem statement] for [target audience].",
      "Business Model:",
      "  - Pricing tiers: [Free/Basic/Pro/Enterprise]",
      "  - Core value proposition: [unique selling point]",
      "  - Revenue streams: [subscription/usage/freemium]",
      "Technical Stack:",
      "  - Frontend: [framework choice] with [state management]",
      "  - Backend: [API framework] with [database]",
      "  - Payment: [Stripe/PayPal integration]",
      "  - Infrastructure: [cloud provider]",
      "MVP Features:",
      "  - User onboarding and authentication",
      "  - [Core feature 1]",
      "  - [Core feature 2]",
      "  - Billing and subscription management",
      "Growth Features:",
      "  - Analytics dashboard",
      "  - Team collaboration",
      "  - API access",
      "Launch Strategy:",
      "  - Beta testing phase: [duration and criteria]",
      "  - Marketing channels: [list primary channels]",
      "  - Success metrics: [KPIs to track]"
    ],
    "description": "Template for SaaS product development"
  },
  "E-commerce Platform Template": {
    "prefix": "prompt-vibe-ecommerce-platform",
    "body": [
      "Context: Complete e-commerce solution with modern shopping experience.",
      "Goal: Create [StoreName] platform that enables [business type] to [sell what to whom].",
      "Core Commerce Features:",
      "  - Product catalog with [categories/filters]",
      "  - Shopping cart and checkout flow",
      "  - Payment processing: [payment methods]",
      "  - Order management and tracking",
      "Customer Experience:",
      "  - Product search and recommendations",
      "  - User accounts and order history",
      "  - Reviews and ratings system",
      "  - Mobile-responsive design",
      "Admin Dashboard:",
      "  - Inventory management",
      "  - Order fulfillment",
      "  - Analytics and reporting",
      "  - Customer support tools",
      "Technical Requirements:",
      "  - Frontend: [React/Next.js] with [UI library]",
      "  - Backend: [API choice] with [database]",
      "  - Payments: [Stripe/Square integration]",
      "  - Hosting: [deployment strategy]",
      "Integrations:",
      "  - Shipping providers: [FedEx/UPS/USPS]",
      "  - Email marketing: [service choice]",
      "  - Analytics: [Google Analytics/custom]",
      "Launch Milestones:",
      "  - Phase 1: Basic product and checkout",
      "  - Phase 2: Advanced features and admin panel",
      "  - Phase 3: Marketing integrations and optimization"
    ],
    "description": "Template for e-commerce platform development"
  },
  "Mobile App Development Template": {
    "prefix": "prompt-vibe-mobile-app",
    "body": [
      "Context: Cross-platform mobile application with native performance.",
      "Goal: Develop [AppName] mobile app that [primary function] for [target users].",
      "Platform Strategy:",
      "  - Target platforms: [iOS/Android/Both]",
      "  - Development approach: [React Native/Flutter/Native]",
      "  - Minimum OS versions: [iOS X.X, Android XX]",
      "Core Features:",
      "  - [Feature 1]: [mobile-specific implementation]",
      "  - [Feature 2]: [offline capability requirements]",
      "  - [Feature 3]: [push notification strategy]",
      "Mobile-Specific Considerations:",
      "  - Offline functionality: [what works offline]",
      "  - Push notifications: [when and what type]",
      "  - Device features: [camera/GPS/biometrics]",
      "  - Performance: [load time and battery optimization]",
      "Backend Services:",
      "  - API endpoints: [REST/GraphQL]",
      "  - Real-time features: [WebSocket/Socket.io]",
      "  - File storage: [images/documents handling]",
      "App Store Strategy:",
      "  - App descriptions and keywords",
      "  - Screenshots and demo videos",
      "  - Review and rating strategy",
      "Monetization:",
      "  - Revenue model: [free/paid/freemium/ads]",
      "  - In-app purchases: [if applicable]",
      "Success Metrics:",
      "  - Download targets: [numbers by timeframe]",
      "  - User engagement: [DAU/retention rates]",
      "  - App store ratings: [target rating]"
    ],
    "description": "Template for mobile application development"
  },
  "AI-Powered Application Template": {
    "prefix": "prompt-vibe-ai-application",
    "body": [
      "Context: AI-integrated application leveraging machine learning capabilities.",
      "Goal: Build [AppName] that uses AI to [specific AI functionality] and [user benefit].",
      "AI Components:",
      "  - Primary AI feature: [description and model choice]",
      "  - Data requirements: [type and volume of data needed]",
      "  - Training approach: [supervised/unsupervised/pre-trained]",
      "  - Inference strategy: [real-time/batch/hybrid]",
      "Technical Architecture:",
      "  - Frontend: [framework] with AI visualization",
      "  - Backend: [API framework] with ML pipeline",
      "  - AI/ML Stack: [TensorFlow/PyTorch/OpenAI API]",
      "  - Data storage: [vector database/traditional DB]",
      "User Experience:",
      "  - AI interaction patterns: [chat/forms/automated]",
      "  - Feedback mechanisms: [how users improve AI]",
      "  - Transparency: [how AI decisions are explained]",
      "Data Pipeline:",
      "  - Data collection: [sources and methods]",
      "  - Preprocessing: [cleaning and transformation]",
      "  - Model training: [continuous/periodic updates]",
      "  - Performance monitoring: [accuracy/drift detection]",
      "Ethical Considerations:",
      "  - Bias mitigation strategies",
      "  - Privacy protection measures",
      "  - Transparent AI decision making",
      "Deployment Strategy:",
      "  - Model versioning and rollback",
      "  - A/B testing for AI improvements",
      "  - Scalability for inference load"
    ],
    "description": "Template for AI-powered application development"
  },
  "Real-time Collaboration Platform Template": {
    "prefix": "prompt-vibe-collaboration-platform",
    "body": [
      "Context: Real-time collaborative platform with multi-user synchronization.",
      "Goal: Create [PlatformName] that enables [team type] to [collaborate on what] in real-time.",
      "Collaboration Features:",
      "  - Real-time editing: [documents/code/design]",
      "  - Live cursors and presence indicators",
      "  - Conflict resolution: [operational transform/CRDT]",
      "  - Version history and rollback",
      "Communication Tools:",
      "  - In-app messaging: [chat/comments/annotations]",
      "  - Video/audio calls: [WebRTC integration]",
      "  - Screen sharing: [implementation approach]",
      "  - Notification system: [real-time alerts]",
      "Technical Implementation:",
      "  - Frontend: [React/Vue] with real-time libraries",
      "  - Backend: [WebSocket server] with [database choice]",
      "  - Synchronization: [Socket.io/WebRTC/custom protocol]",
      "  - State management: [conflict-free replicated data types]",
      "User Management:",
      "  - Team organization and permissions",
      "  - Role-based access control",
      "  - User presence and activity tracking",
      "Performance Considerations:",
      "  - Latency optimization: [< Xms target]",
      "  - Concurrent user limits: [scalability targets]",
      "  - Offline support: [sync when reconnected]",
      "Security Features:",
      "  - End-to-end encryption for sensitive data",
      "  - Audit logs for compliance",
      "  - Session management and timeout"
    ],
    "description": "Template for real-time collaboration platform"
  },
  "Analytics Dashboard Template": {
    "prefix": "prompt-vibe-analytics-dashboard",
    "body": [
      "Context: Comprehensive analytics dashboard with data visualization and insights.",
      "Goal: Build [DashboardName] that provides [stakeholder type] with [data insights] for [decision making].",
      "Data Sources:",
      "  - Primary data: [database/API sources]",
      "  - External integrations: [Google Analytics/social media/CRM]",
      "  - Real-time streams: [live data feeds]",
      "  - Data refresh frequency: [real-time/hourly/daily]",
      "Visualization Components:",
      "  - Key metrics: [KPI cards with trends]",
      "  - Charts: [line/bar/pie/heatmap types needed]",
      "  - Interactive filters: [date ranges/segments/dimensions]",
      "  - Drill-down capabilities: [hierarchical data exploration]",
      "Dashboard Features:",
      "  - Customizable layouts: [drag-and-drop widgets]",
      "  - Export functionality: [PDF/Excel/CSV]",
      "  - Automated reports: [scheduled email reports]",
      "  - Alert system: [threshold-based notifications]",
      "Technical Stack:",
      "  - Frontend: [React/Vue] with [D3.js/Chart.js/Recharts]",
      "  - Backend: [API framework] with data processing",
      "  - Database: [time-series DB/data warehouse]",
      "  - Caching: [Redis for performance]",
      "User Experience:",
      "  - Role-based dashboards: [different views per user type]",
      "  - Mobile responsiveness: [touch-friendly charts]",
      "  - Loading states: [skeleton screens for data loading]",
      "Performance Requirements:",
      "  - Load time: [< X seconds for dashboard]",
      "  - Data processing: [handle X records efficiently]",
      "  - Concurrent users: [support X simultaneous users]"
    ],
    "description": "Template for analytics dashboard development"
  },
  "Marketplace Platform Template": {
    "prefix": "prompt-vibe-marketplace-platform",
    "body": [
      "Context: Multi-vendor marketplace connecting [sellers] with [buyers].",
      "Goal: Create [MarketplaceName] where [vendor type] can [sell/offer what] to [customer type].",
      "Marketplace Model:",
      "  - Business model: [commission/subscription/listing fees]",
      "  - Vendor onboarding: [approval process/requirements]",
      "  - Quality control: [review system/moderation]",
      "Core Platform Features:",
      "  - Vendor storefronts: [customizable shop pages]",
      "  - Product/service listings: [catalog management]",
      "  - Search and discovery: [filters/recommendations]",
      "  - Transaction handling: [payment splitting/escrow]",
      "User Roles & Permissions:",
      "  - Marketplace admin: [platform management tools]",
      "  - Vendors: [seller dashboard and tools]",
      "  - Customers: [buyer experience and account]",
      "Trust & Safety:",
      "  - Vendor verification: [identity/business validation]",
      "  - Review and rating system: [bi-directional feedback]",
      "  - Dispute resolution: [mediation process]",
      "  - Content moderation: [automated/manual review]",
      "Technical Architecture:",
      "  - Multi-tenant system: [vendor isolation]",
      "  - Payment processing: [multi-party payments]",
      "  - API design: [vendor integrations]",
      "  - Scalability: [handle growth in vendors/transactions]",
      "Growth Strategy:",
      "  - Vendor acquisition: [incentives/marketing]",
      "  - Customer acquisition: [marketing channels]",
      "  - Network effects: [how to bootstrap both sides]"
    ],
    "description": "Template for marketplace platform development"
  },
  "IoT Dashboard & Control Template": {
    "prefix": "prompt-vibe-iot-dashboard",
    "body": [
      "Context: IoT device management and monitoring platform.",
      "Goal: Build [PlatformName] to monitor and control [device type] for [use case/industry].",
      "Device Integration:",
      "  - Supported protocols: [MQTT/HTTP/CoAP/LoRaWAN]",
      "  - Device onboarding: [provisioning/pairing process]",
      "  - Firmware updates: [OTA update management]",
      "  - Device authentication: [certificates/tokens]",
      "Data Management:",
      "  - Sensor data ingestion: [real-time streaming]",
      "  - Time-series storage: [InfluxDB/TimescaleDB]",
      "  - Data retention policies: [archival strategy]",
      "  - Edge computing: [local processing requirements]",
      "Control Features:",
      "  - Remote device control: [commands/configuration]",
      "  - Automation rules: [condition-based actions]",
      "  - Scheduling: [time-based operations]",
      "  - Batch operations: [manage multiple devices]",
      "Monitoring & Alerts:",
      "  - Real-time dashboards: [device status/metrics]",
      "  - Alert system: [threshold/anomaly detection]",
      "  - Health monitoring: [device connectivity/performance]",
      "  - Predictive maintenance: [failure prediction]",
      "Technical Stack:",
      "  - Frontend: [React/Vue] with real-time updates",
      "  - Backend: [message broker] with [time-series DB]",
      "  - Communication: [WebSocket/Server-Sent Events]",
      "  - Cloud services: [AWS IoT/Azure IoT/Google Cloud IoT]",
      "Security Considerations:",
      "  - Device-to-cloud encryption",
      "  - Role-based access control",
      "  - Audit logging for compliance"
    ],
    "description": "Template for IoT dashboard and control system"
  },
  "Learning Management System Template": {
    "prefix": "prompt-vibe-lms-platform",
    "body": [
      "Context: Educational platform for online learning and course management.",
      "Goal: Create [PlatformName] LMS that enables [educators/organizations] to deliver [type of education] to [learners].",
      "Course Management:",
      "  - Course creation tools: [content types/multimedia support]",
      "  - Curriculum structure: [modules/lessons/assessments]",
      "  - Content delivery: [video streaming/interactive elements]",
      "  - Progress tracking: [completion rates/learning paths]",
      "Learning Experience:",
      "  - Student dashboard: [progress/assignments/grades]",
      "  - Interactive elements: [quizzes/discussions/simulations]",
      "  - Social learning: [forums/peer collaboration]",
      "  - Mobile learning: [offline content/responsive design]",
      "Assessment & Analytics:",
      "  - Quiz and test builder: [question types/auto-grading]",
      "  - Learning analytics: [engagement/performance metrics]",
      "  - Reporting tools: [instructor/admin dashboards]",
      "  - Certification: [badges/certificates/transcripts]",
      "Communication Tools:",
      "  - Messaging system: [student-instructor communication]",
      "  - Video conferencing: [live classes/office hours]",
      "  - Announcement system: [course updates/notifications]",
      "  - Discussion forums: [threaded conversations]",
      "Technical Implementation:",
      "  - Frontend: [React/Vue] with learning-focused UX",
      "  - Backend: [scalable API] with [database choice]",
      "  - Video delivery: [CDN/streaming optimization]",
      "  - File management: [content storage/version control]",
      "Integration Capabilities:",
      "  - LTI compliance: [third-party tool integration]",
      "  - SIS integration: [student information systems]",
      "  - Payment processing: [course purchases/subscriptions]"
    ],
    "description": "Template for Learning Management System development"
  },
  "Social Media Platform Template": {
    "prefix": "prompt-vibe-social-platform",
    "body": [
      "Context: Social networking platform with user-generated content and community features.",
      "Goal: Build [PlatformName] social network focused on [niche/community] with [unique value proposition].",
      "Core Social Features:",
      "  - User profiles: [customization/verification/privacy settings]",
      "  - Content creation: [posts/media/stories/live streaming]",
      "  - Social interactions: [likes/comments/shares/reactions]",
      "  - Following system: [connections/followers/friends]",
      "Content & Discovery:",
      "  - Content feeds: [algorithmic/chronological/curated]",
      "  - Search functionality: [users/content/hashtags]",
      "  - Trending topics: [viral content/hashtag tracking]",
      "  - Content moderation: [automated/community/admin review]",
      "Community Features:",
      "  - Groups/communities: [private/public/moderated]",
      "  - Events system: [creation/RSVP/calendar integration]",
      "  - Messaging: [direct messages/group chats]",
      "  - Live features: [streaming/spaces/real-time interaction]",
      "Safety & Moderation:",
      "  - Content policies: [community guidelines enforcement]",
      "  - Reporting system: [user reporting/admin tools]",
      "  - Privacy controls: [content visibility/blocking]",
      "  - Anti-spam measures: [automated detection/human review]",
      "Technical Architecture:",
      "  - Frontend: [React/Vue] with real-time updates",
      "  - Backend: [scalable microservices] with [database strategy]",
      "  - Media handling: [image/video processing/CDN]",
      "  - Real-time features: [WebSocket/push notifications]",
      "Monetization Strategy:",
      "  - Revenue model: [ads/premium features/creator economy]",
      "  - Creator tools: [monetization/analytics/promotion]",
      "  - Advertisement system: [targeted/native/sponsored content]"
    ],
    "description": "Template for social media platform development"
  },
  "Fintech Application Template": {
    "prefix": "prompt-vibe-fintech-app",
    "body": [
      "Context: Financial technology application with secure transactions and compliance.",
      "Goal: Develop [AppName] fintech solution that [financial service] for [target market].",
      "Financial Features:",
      "  - Core service: [payments/lending/investing/banking]",
      "  - Transaction processing: [real-time/batch/settlement]",
      "  - Account management: [multi-currency/balance tracking]",
      "  - Financial analytics: [spending insights/investment tracking]",
      "Security & Compliance:",
      "  - Regulatory compliance: [PCI DSS/GDPR/SOX/local regulations]",
      "  - Data encryption: [at rest/in transit/key management]",
      "  - Fraud detection: [machine learning/rule-based systems]",
      "  - Identity verification: [KYC/AML procedures]",
      "User Experience:",
      "  - Onboarding flow: [identity verification/account setup]",
      "  - Transaction interface: [intuitive/secure/accessible]",
      "  - Mobile-first design: [responsive/native app considerations]",
      "  - Accessibility: [WCAG compliance for financial inclusion]",
      "Integration Requirements:",
      "  - Banking APIs: [open banking/account aggregation]",
      "  - Payment processors: [Stripe/Square/traditional banks]",
      "  - Credit bureaus: [credit scoring/reporting]",
      "  - Regulatory reporting: [automated compliance reporting]",
      "Technical Stack:",
      "  - Frontend: [secure web/mobile framework]",
      "  - Backend: [high-availability architecture]",
      "  - Database: [encrypted/ACID compliant/audit trails]",
      "  - Infrastructure: [cloud security/disaster recovery]",
      "Risk Management:",
      "  - Transaction monitoring: [suspicious activity detection]",
      "  - Risk scoring: [user/transaction risk assessment]",
      "  - Operational risk: [system downtime/data protection]",
      "Launch Strategy:",
      "  - Pilot program: [limited rollout/feedback collection]",
      "  - Regulatory approval: [licensing/compliance verification]",
      "  - Security audits: [penetration testing/code review]"
    ],
    "description": "Template for fintech application development"
  },
  "Content Management System Template": {
    "prefix": "prompt-vibe-cms-platform",
    "body": [
      "Context: Headless/traditional CMS for content creation and management.",
      "Goal: Build [CMSName] that empowers [content creators/marketers] to manage [content type] across [channels].",
      "Content Management:",
      "  - Content modeling: [flexible schemas/custom fields]",
      "  - Rich text editor: [WYSIWYG/markdown/block-based]",
      "  - Media management: [asset library/image optimization]",
      "  - Version control: [content history/draft management]",
      "Publishing Features:",
      "  - Multi-channel publishing: [web/mobile/API delivery]",
      "  - Scheduling: [publish dates/content calendar]",
      "  - Preview system: [draft preview/staging environments]",
      "  - SEO optimization: [meta tags/URL management/sitemap]",
      "Collaboration Tools:",
      "  - Editorial workflow: [draft/review/publish pipeline]",
      "  - User roles: [authors/editors/publishers/admins]",
      "  - Comments and feedback: [content review process]",
      "  - Content approval: [multi-stage approval workflow]",
      "Developer Experience:",
      "  - API-first design: [REST/GraphQL endpoints]",
      "  - Webhooks: [content change notifications]",
      "  - SDK/libraries: [popular framework integrations]",
      "  - Documentation: [API docs/developer guides]",
      "Technical Architecture:",
      "  - Headless approach: [API-driven content delivery]",
      "  - Database design: [content storage/relationships]",
      "  - Caching strategy: [content delivery optimization]",
      "  - Search functionality: [full-text search/filtering]",
      "Admin Interface:",
      "  - Dashboard: [content overview/analytics]",
      "  - Content editor: [intuitive creation interface]",
      "  - Asset management: [file uploads/organization]",
      "  - System settings: [configuration/user management]",
      "Performance & Scale:",
      "  - CDN integration: [global content delivery]",
      "  - Database optimization: [query performance/indexing]",
      "  - Concurrent editing: [conflict resolution/real-time sync]"
    ],
    "description": "Template for CMS platform development"
  }

}
